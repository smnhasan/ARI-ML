mtry = 4,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
p1 <- predict(rf, kr)
confusionMatrix(p1, kr$ï..ebf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 30,
mtry = 4,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
p1 <- predict(rf, kr)
confusionMatrix(p1, kr$ï..ebf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 30,
mtry = 2,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
p1 <- predict(rf, kr)
confusionMatrix(p1, kr$ï..ebf)
setwd('F:\\ResearchProject\\ARI_LR_ANN')
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 30,
mtry = 2,
importance = TRUE,
proximity = TRUE)
print(rf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 30,
mtry = 20,
importance = TRUE,
proximity = TRUE)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 30,
mtry = 5,
importance = TRUE,
proximity = TRUE)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 300,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
p1 <- predict(rf, kr)
confusionMatrix(p1, kr$ï..ebf)
p1
kr$ï..ebf
p1 <- predict(rf, kr, type = "response")
pred <- predict(rf, kr, type = "response")
pred1 <- ifelse(pred$x>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
pred1 <- ifelse(pred$x>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ï..ebf)
pred1
kr$ï..ebf
confusionMatrix(pred1, kr$ebf)
plot(rf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 50,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ebf)
setwd('F:\\ResearchProject\\ARI_LR_ANN')
kr <- read.table("BF.csv",sep=',',header=T)
library(randomForest)
set.seed(222)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 50,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ebf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 500,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 600,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 1000,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ebf)
require(maptools)
library(randomForest)
set.seed(222)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 1000,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ebf)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 500,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ebf)
setwd('F:\\ResearchProject\\ARI_LR_ANN')
kr <- read.table("BF.csv",sep=',',header=T)
library(randomForest)
set.seed(222)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 500,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
plot(rf)
pred1 <- ifelse(pred>0.5, 1, 0)   ## if greatr than median value then 1 otherwise 0
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))
confusionMatrix(pred1, kr$ebf)
#auc value
library(ROCR)
detach(package:neuralnet)
#missing
sapply(kr,function(x) sum(is.na(x)))
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
############ ANN 5 #############
library(neuralnet)
kr <- read.table("BF.csv",sep=',',header=T)
summary(kr$ï..ebf)
set.seed(333)
#With 5 Hidden leyar
n <- neuralnet(ï..ebf ~ .,
data=kr,
hidden = 5,
threshold=0.1,
act.fct = "logistic",
linear.output = FALSE,
lifesign='full',
rep=5,
algorithm="rprop+",
learningrate.limit = NULL,
learningrate.factor =
list(minus = 0.5, plus = 1.2),
learningrate=NULL,
stepmax=100000)
summary(n)
# Confusion Matrix & Misclassification Error - training data
output<-compute(n, kr)
pred <- output$net.result
actual<- kr$ï..ebf
MSE<- sum((pred-actual)^2)/nrow(kr)
MSE
pred1 <- ifelse(pred>0.5, 1, 0)
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))  ## for confuson matrix we need to factor it
confusionMatrix(pred1,kr$ebf)   ## actual Yes=78 No=211
x <- as.numeric(actual)
pred1 <- as.numeric(pred1)
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
library(neuralnet)
kr <- read.table("BF.csv",sep=',',header=T)
summary(kr$ï..ebf)
set.seed(333)
#With 10 Hidden leyar
n <- neuralnet(ï..ebf ~ .,
data=kr,
hidden = 10,
threshold=0.1,
act.fct = "logistic",
linear.output = FALSE,
lifesign='full',
rep=5,
algorithm="rprop+",
learningrate.limit = NULL,
learningrate.factor =
list(minus = 0.5, plus = 1.2),
learningrate=NULL,
stepmax=100000)
summary(n)
# Confusion Matrix & Misclassification Error - training data
output<-compute(n, kr)
pred <- output$net.result
actual<- kr$ï..ebf
MSE<- sum((pred-actual)^2)/nrow(kr)
MSE
pred1 <- ifelse(pred>0.5, 1, 0)
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))  ## for confuson matrix we need to factor it
confusionMatrix(pred1,kr$ebf)   ## actual Yes=78 No=211
x <- as.numeric(actual)
pred1 <- as.numeric(pred1)
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
library(neuralnet)
kr <- read.table("BF.csv",sep=',',header=T)
summary(kr$ï..ebf)
set.seed(333)
#With 15 Hidden leyar
n <- neuralnet(ï..ebf ~ .,
data=kr,
hidden = 15,
threshold=0.1,
act.fct = "logistic",
linear.output = FALSE,
lifesign='full',
rep=5,
algorithm="rprop+",
learningrate.limit = NULL,
learningrate.factor =
list(minus = 0.5, plus = 1.2),
learningrate=NULL,
stepmax=100000)
summary(n)
# Confusion Matrix & Misclassification Error - training data
output<-compute(n, kr)
pred <- output$net.result
actual<- kr$ï..ebf
MSE<- sum((pred-actual)^2)/nrow(kr)
MSE
pred1 <- ifelse(pred>0.5, 1, 0)
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))  ## for confuson matrix we need to factor it
confusionMatrix(pred1,kr$ebf)   ## actual Yes=78 No=211
x <- as.numeric(actual)
pred1 <- as.numeric(pred1)
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
library(neuralnet)
kr <- read.table("BF.csv",sep=',',header=T)
summary(kr$ï..ebf)
set.seed(333)
#With 20 Hidden leyar
n <- neuralnet(ï..ebf ~ .,
data=kr,
hidden = 20,
threshold=0.1,
act.fct = "logistic",
linear.output = FALSE,
lifesign='full',
rep=5,
algorithm="rprop+",
learningrate.limit = NULL,
learningrate.factor =
list(minus = 0.5, plus = 1.2),
learningrate=NULL,
stepmax=100000)
summary(n)
# Confusion Matrix & Misclassification Error - training data
output<-compute(n, kr)
pred <- output$net.result
actual<- kr$ï..ebf
MSE<- sum((pred-actual)^2)/nrow(kr)
MSE
pred1 <- ifelse(pred>0.5, 1, 0)
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))  ## for confuson matrix we need to factor it
confusionMatrix(pred1,kr$ebf)   ## actual Yes=78 No=211
x <- as.numeric(actual)
pred1 <- as.numeric(pred1)
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
library(neuralnet)
kr <- read.table("BF.csv",sep=',',header=T)
summary(kr$ï..ebf)
set.seed(333)
#With 25 Hidden leyar
n <- neuralnet(ï..ebf ~ .,
data=kr,
hidden = 25,
threshold=0.1,
act.fct = "logistic",
linear.output = FALSE,
lifesign='full',
rep=5,
algorithm="rprop+",
learningrate.limit = NULL,
learningrate.factor =
list(minus = 0.5, plus = 1.2),
learningrate=NULL,
stepmax=100000)
summary(n)
# Confusion Matrix & Misclassification Error - training data
output<-compute(n, kr)
pred <- output$net.result
actual<- kr$ï..ebf
MSE<- sum((pred-actual)^2)/nrow(kr)
MSE
pred1 <- ifelse(pred>0.5, 1, 0)
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))  ## for confuson matrix we need to factor it
confusionMatrix(pred1,kr$ebf)   ## actual Yes=78 No=211
x <- as.numeric(actual)
pred1 <- as.numeric(pred1)
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
library(neuralnet)
kr <- read.table("BF.csv",sep=',',header=T)
summary(kr$ï..ebf)
set.seed(333)
#With 30 Hidden leyar
n <- neuralnet(ï..ebf ~ .,
data=kr,
hidden = 30,
threshold=0.1,
act.fct = "logistic",
linear.output = FALSE,
lifesign='full',
rep=5,
algorithm="rprop+",
learningrate.limit = NULL,
learningrate.factor =
list(minus = 0.5, plus = 1.2),
learningrate=NULL,
stepmax=100000)
summary(n)
# Confusion Matrix & Misclassification Error - training data
output<-compute(n, kr)
pred <- output$net.result
actual<- kr$ï..ebf
MSE<- sum((pred-actual)^2)/nrow(kr)
MSE
pred1 <- ifelse(pred>0.5, 1, 0)
pred1<- factor(pred1,levels=c(0,1),labels = c('No','Yes'))
kr$ebf <- factor(kr$ï..ebf,levels = c(0,1),labels = c('No','Yes'))  ## for confuson matrix we need to factor it
confusionMatrix(pred1,kr$ebf)   ## actual Yes=78 No=211
x <- as.numeric(actual)
pred1 <- as.numeric(pred1)
#auc value
library(ROCR)
detach(package:neuralnet)
pr <- prediction(as.numeric(pred1),as.numeric(kr$ebf))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc.tmp <- performance(pr,"auc"); auc <- as.numeric(auc.tmp@y.values)
auc
importance(n)
varImp(n)
varImp(n)
varImp()
importance(n)
print(importance(n,type = 2))
library(caret)
print(importance(n,type = 2))
importance(n)
varImp()
#create a pretty color vector for the bar plot
cols<-colorRampPalette(c('lightgreen','lightblue'))(num.vars)
kr
#create a pretty color vector for the bar plot
cols<-colorRampPalette(c('lightgreen','lightblue'))(14)
#use the function on the model created above
par(mar=c(3,4,1,1),family='serif')
gar.fun('y',n,col=cols,ylab='Rel. importance',ylim=c(-1,1))
require(devtools)
#import 'gar.fun' from Github
source_gist('6206737')
install.packages("devtools", dependencies = FALSE)
#create a pretty color vector for the bar plot
cols<-colorRampPalette(c('lightgreen','lightblue'))(14)
#use the function on the model created above
par(mar=c(3,4,1,1),family='serif')
gar.fun('y',n,col=cols,ylab='Rel. importance',ylim=c(-1,1))
require(devtools)
#import 'gar.fun' from Github
source_gist('6206737')
#import 'gar.fun' from Github
source_gist('6206737')
#import 'gar.fun' from Github
install_github("gar.fun")
require(devtools)
#import 'gar.fun' from Github
install_github("gar.fun")
library(randomForest)
set.seed(222)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 500,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
# Prediction & Confusion Matrix - train data
library(caret)
detach(package:neuralnet)
pred <- predict(rf, kr, type = "response")
print(importance(rf,type = 2))
kr <- read.table("BF.csv",sep=',',header=T)
library(randomForest)
set.seed(222)
rf <- randomForest(kr$ï..ebf~., data=kr,
ntree = 500,
mtry = 5,
importance = TRUE,
proximity = TRUE)
print(rf)
attributes(rf)
print(importance(rf,type = 2))
